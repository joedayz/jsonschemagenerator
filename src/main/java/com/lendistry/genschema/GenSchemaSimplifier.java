package com.lendistry.genschema;

import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

/**
 * The GenSchemaSimplifier. Given a Schema generated by GenSchema, it will try to simplify the schema
 * by merging the scenarios that look similar.
 */

public class GenSchemaSimplifier {

    private final int similarityRate;

    public GenSchemaSimplifier(int similarityRate){
        super();
        this.similarityRate = similarityRate;
    }

    public GenSchemaSimplifier(){
        this(3);
    }

    /**
     * Performs the analysis
     * @param schema an GenSchema object
     * @return the (hopefully) simplified schema
     */
    public Schema analyze(Schema schema){
        analyzeProperty(schema.clone());
        return schema;
    }

    /**
     * Starts the analysis process
     * @param property the property to analyze
     */
    private void analyzeProperty(Property property){
        /*
         * If the property's "items" field has an anyOf combinatory field.
         * This means multiple scenarios apply, and we want to check whether some of these can be merged
         */
        if(property.hasItems() && property.getItems().hasAnyOf()) {
            // For each scenario...
            Iterator<Property> iterator = property.getItems().getAnyOf().iterator();
            List<Property> toRemove = new LinkedList<>();
            HashSet<Property> toAdd = new HashSet<>();
            // We first take one sample property...
            Property currentProp = iterator.next();
            // ... and iterate through the others
            while(iterator.hasNext()){
                Property prop2 = iterator.next();
                // If both properties sub-properties that look "similar"
                if(currentProp.hasProperties() && prop2.hasProperties() && GenSchemaUtils.haveSimilarProps(currentProp,prop2,similarityRate)){
                    // We mark both for removal
                    toRemove.add(currentProp);
                    toRemove.add(prop2);
                    // And create a merged version of them to be added
                    currentProp = GenSchemaUtils.merge(currentProp,prop2);
                    toAdd.add(currentProp);
                }
            }
            // Remove the items marked for removal
            property.getItems().getAnyOf().removeAll(toRemove);
            /*
             * If the items to add are one, and the anyOf has been left empty, it means we are left with one
             * scenario and the anyOf is not useful anymore, so we can set the one scenario to "items"
             */
            if(toAdd.size()==1 && property.getItems().getAnyOf().size()==0) {
                property.setItems(toAdd.iterator().next());
            }
            else
                // Otherwise we can add all the sceanrios to anyOf
                property.getItems().getAnyOf().addAll(toAdd);
            // If this had no anyOf, it means this property has, at best, regular child properties
        } else{
            // If it has regular properties
            if(property.hasProperties())
                // We can dig into them in a recursive fashion
                property.getProperties().values().forEach(this::analyzeProperty);
        }

    }
}
